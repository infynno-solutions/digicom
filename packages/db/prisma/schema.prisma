generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String
  username        String           @unique
  email           String           @unique
  password        String
  emailVerifiedAt DateTime?
  timezone        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  Token           Token[]
  Product         Product[]
  PaymentAccount  PaymentAccount[]
  Order           Order[]
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

model Token {
  token     String    @unique
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  type      TokenType
  expiresAt DateTime?
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  UNLISTED
  PRIVATE
}

model Product {
  id                 String            @id @default(cuid())
  title              String
  description        String?           @db.Text
  thumbnail          String?
  price              Float             @default(0)
  currency           String
  limitQuantity      Boolean           @default(false)
  quantity           Int               @default(0)
  hideQuantity       Boolean           @default(false)
  hideSales          Boolean           @default(false)
  refundEnabled      Boolean           @default(false)
  refundPolicy       String?           @db.Text
  onPurchaseRedirect Boolean           @default(false)
  redirectLink       String?
  status             ProductStatus     @default(DRAFT)
  user               User              @relation(fields: [userId], references: [id])
  userId             String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  ProductDelivery    ProductDelivery[]
  Order              Order[]
}

enum DeliveryType {
  FILE
  EXTERNAL_LINK
  CONTENT
}

model ProductDelivery {
  id           String       @id @default(cuid())
  type         DeliveryType
  instructions String?      @db.Text
  externalLink String?
  content      String?      @db.Text
  file         String?      @db.Text
  product      Product      @relation(fields: [productId], references: [id])
  productId    String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

enum PaymentProvider {
  STRIPE
}

model PaymentAccount {
  id                String          @id @default(cuid())
  provider          PaymentProvider
  stripePublicKey   String
  stripeSecretKey   String
  useStripeCheckout Boolean         @default(true)
  user              User            @relation(fields: [userId], references: [id])
  userId            String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@unique([userId, provider])
}

enum OrderStatus {
  NOT_PAID
  EXPIRED
  BAD_CARD
  BLOCKED
  CANCELED
  CHARGEBACK
  PENDING
  REFUNDED
  COMPLETED
}

model Order {
  id               String      @id @default(cuid())
  user             User        @relation(fields: [userEmail], references: [email])
  userEmail        String
  product          Product     @relation(fields: [productId], references: [id])
  productId        String
  price            Float
  currency         String
  paymentRequestId String?
  status           OrderStatus @default(NOT_PAID)
  delivered        Boolean     @default(false)
  expiresAt        DateTime?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}
